import os
import requests
import gradio as gr
from dotenv import load_dotenv

load_dotenv()

# URL –≤–∞—à–µ–≥–æ retriever-—Å–µ—Ä–≤–∏—Å–∞
RETRIEVER_URL = os.getenv("RETRIEVER_URL", "http://retriever:8001/retrieve")

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ RAG —Å–µ—Ä–≤–∏—Å—É
def run_rag(query: str):
    """
    1) –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ retriever
    2) –ü–æ–ª—É—á–∞–µ—Ç JSON —Å –ø–æ–ª—è–º–∏ final_answer –∏ contexts
    3) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
    """
    try:
        resp = requests.post(RETRIEVER_URL, json={"query": query}, timeout=10)
        resp.raise_for_status()
        data = resp.json()
        return data.get("final_answer", ""), data.get("contexts", [])
    except requests.exceptions.RequestException as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {e}", []

# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
def format_contexts(contexts: list):
    formatted = []
    for ctx in contexts:
        caption = ctx.get("caption", "")
        source = ctx.get("source", "")
        score = ctx.get("score", 0)
        timestamp = ctx.get("timestamp_ms", 0)
        formatted.append({
            "Caption": caption,
            "Source": source,
            "Score": f"{score:.3f}",
            "Timestamp": timestamp
        })
    return formatted

# Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
with gr.Blocks(title="üîç RAG QA Interface") as demo:
    gr.Markdown("""
    # Retrieval-Augmented Generation
    **–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.**
    """)

    with gr.Row():
        query_input = gr.Textbox(label="‚ùì –í–∞—à –≤–æ–ø—Ä–æ—Å", placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∑–¥–µ—Å—å‚Ä¶", lines=1)
        submit_btn = gr.Button("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å")

    with gr.Row():
        answer_box = gr.Textbox(label="üí° –û—Ç–≤–µ—Ç", interactive=False, lines=4)

    with gr.Accordion("üìö –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã", open=False) as acc:
        contexts_table = gr.Dataframe(
            headers=["Caption", "Source", "Score", "Timestamp"],
            interactive=False,
            datatype=["str", "str", "str", "number"]
        )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
    submit_btn.click(
        fn=lambda q: run_rag(q),
        inputs=[query_input],
        outputs=[answer_box, contexts_table],
        show_progress=True
    )

    demo.load(
        fn=lambda: ("", []),
        inputs=None,
        outputs=[answer_box, contexts_table]
    )

if __name__ == "__main__":
    demo.launch(server_name="0.0.0.0", server_port=7860, share=False)
